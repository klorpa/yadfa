;;;; -*- mode: Common-Lisp; sly-buffer-package: "yadfa"; coding: utf-8-unix; -*-
(in-package :yadfa)
(declaim (ftype (function () (values (eql t) &optional)) switch-user-packages go-to-sleep)
         (ftype (function (list) (values (or zone null) t &optional)) get-zone)
         (ftype (function (integer list) (values boolean &optional)) list-length-<= list-length-< list-length-> list-length->=)
         (ftype (function ((or list symbol)) (values boolean &optional)) finished-events unfinished-events)
         (ftype (function (closed-bottoms) (values real &optional)) get-diaper-expansion)
         (ftype (function (symbol base-character &key (:duration (or null unsigned-byte)) (:test (or symbol function)) (:key (or symbol function)))
                          (values (eql t) &optional))
                set-status-condition)
         (ftype (function ((or symbol list)) (values list &optional)) trigger-event)
         (ftype (function (symbol) list) event-attributes)
         (ftype (function (symbol list) list) get-warp-point get-destination)
         (ftype (function (list &optional list symbol) (values list &optional string)) get-path-end)
         (ftype (function (list symbol) (values boolean &optional)) travelablep)
         (ftype (function ((or string coerced-function)) (values string &optional)) get-zone-text)
         (ftype (function (list &optional list symbol) null) print-enter-text)
         (ftype (function () list) get-inventory-list)
         (ftype (function (list type-specifier) list) filter-items)
         (ftype (function (base-character) list) swell-up%)
         (ftype (function (base-character) (values list symbol &optional)) swell-up)
         (ftype (function (list clothing) (values real &optional)) fast-thickness)
         (ftype (function (base-character &optional cons) (values list symbol &optional)) pop-from-expansion)
         (ftype (function (list &optional (or null unsigned-byte)) list) thickest)
         (ftype (function (&key (:wet-amount (or boolean real)) (:force-fill-amount (or null real)) (:pants-down t) (:accident t)
                                (:force-wet-amount (or boolean real)) (:wetter base-character) (:clothes list)) (values list &optional)) wet)
         (ftype (function (&key (:mess-amount (or boolean real)) (:force-fill-amount (or null real)) (:pants-down t) (:accident t)
                                (:force-mess-amount (or boolean real)) (:messer base-character) (:clothes list)) (values list &optional)) mess)
         (ftype (function (list) (values list &optional)) get-props-from-zone thickest-sort calculate-diaper-usage*)
         (ftype (function (symbol list) (values list &optional)) get-items-from-prop)
         (ftype (function (symbol list) (values real &optional)) get-bitcoins-from-prop)
         (ftype (function (symbol base-character) (values (or move null) &optional)) get-move)
         (ftype (function (base-character) list) calculate-diaper-usage)
         (ftype (function (real) (values real real &optional)) calculate-level-to-exp)
         (ftype (function (enemy) (values real &optional)) calculate-exp-yield)
         (ftype (function (base-character) (values list &optional))
                calculate-wear-stats calculate-wield-stats calculate-stat-delta calculate-stat-multiplier)
         (ftype (function (base-character keyword) (values real real &optional)) calculate-stat)
         (ftype (function (item &optional boolean) (values (eql t) &optional)) describe-item)
         (ftype (function (&optional boolean) (values (eql t) &optional)) finish-battle)
         (ftype (function (list) (values null &optional)) wash)
         (ftype (function (base-character) (values cons &optional)) go-to-sleep%)
         (ftype (function (list symbol symbol) (values action &optional)) getf-action-from-prop)
         (ftype (function (&key (:attack (or symbol boolean)) (:item item) (:reload type-specifier) (:no-team-attack t)
                                (:selected-target (or null enemy team-member)))
                          t)
                process-battle)
         (ftype (function (ally) (values (eql t) &optional)) ally-join)
         (ftype (function (simple-string boolean simple-string) (values (eql t) &optional)) set-player))
