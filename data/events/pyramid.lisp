;;;; -*- mode: Common-Lisp; sly-buffer-package: "yadfa-events"; coding: utf-8-unix; -*-
(in-package :yadfa-events)
(defevent infinity-diaper-obtained-1)
(defevent pyramid-puzzle-1
  :lambda (lambda (self)
            (declare (ignore self))
            (cond ((finished-events 'infinity-diaper-obtained-1)
                   (write-line "The entrance seems to have been sealed."))
                  ((destructuring-bind (&key (sogginess 0) (sogginess-capacity 0) (messiness 0) (messiness-capacity 0))
                       (calculate-diaper-usage (player-of *game*))
                     (declare (ignore sogginess-capacity messiness-capacity))
                     (or (> sogginess 0) (> messiness 0)))
                   (write-line "According to the hieroglyphics, to open the entrance, your pamps must be clean."))
                  (t (multiple-value-bind (result wear) (funcall 'yadfa-pyramid:run-game)
                       (let* ((bladder-time (/ (- (bladder/need-to-potty-limit-of (player-of *game*))
                                                  (bladder/contents-of (player-of *game*)))
                                               (bladder/fill-rate-of (player-of *game*))))
                              (bowels-time (/ (- (bowels/need-to-potty-limit-of (player-of *game*))
                                                     (bowels/contents-of (player-of *game*)))
                                                  (bowels/fill-rate-of (player-of *game*))))
                              (flood-or-mess (cond ((and (> (bowels/contents-of (player-of *game*)) (bowels/need-to-potty-limit-of (player-of *game*)))
                                                         (> (bladder/contents-of (player-of *game*)) (bladder/need-to-potty-limit-of (player-of *game*))))
                                                    'both)
                                                   ((> (bowels/contents-of (player-of *game*)) (bowels/need-to-potty-limit-of (player-of *game*)))
                                                    'mess)
                                                   ((> (bladder/contents-of (player-of *game*)) (bladder/need-to-potty-limit-of (player-of *game*)))
                                                    'flood)
                                                   ((= bladder-time bowels-time) 'both-fill)
                                                   ((< bladder-time bowels-time) 'bladder-fill)
                                                   (t 'bowels-fill)))
                              (diapers (member wear '(yadfa-items:cursed-diaper yadfa-items:temple-pullups)
                                               :test (lambda (o e)
                                                       (filter-items o e)))))
                         (unless result
                           (format t "~a~a, You give up ~a your ~a~%"
                                   (case diapers
                                     (yadfa-items:cursed-diaper "After struggling to remove your pamps")
                                     (yadfa-items:temple-pullups "After searching around for a bathroom"))
                                   (if (or (> (bladder/contents-of (player-of *game*)) (bladder/potty-dance-limit-of (player-of *game*)))
                                           (> (bowels/contents-of (player-of *game*)) (bowels/potty-dance-limit-of (player-of *game*))))
                                       " doing a potty dance like a 5 year old"
                                       "")
                                   (typecase flood-or-mess
                                     ((member both mess both-fill bowels-fill)
                                      "reluctantly squat down with a blush on your face and fill")
                                     (t
                                      "with a blush on your face reluctantly flood"))
                                   (case diapers
                                     (yadfa-items:cursed-diaper "diapers")
                                     (yadfa-items:temple-pullups "pullups. You get even more embarrassed when you realized your pullups transformed back into diapers while you were using them.")))
                           (case diapers
                             ((both-fill bowels-fill)
                              (incf (bowels/contents-of (player-of *game*)) (* bowels-time (bowels/fill-rate-of (player-of *game*))))
                              (incf (bladder/contents-of (player-of *game*)) (* bowels-time (bladder/fill-rate-of (player-of *game*)))))
                             (bladder-fill
                              (incf (bowels/contents-of (player-of *game*)) (* bladder-time (bowels/fill-rate-of (player-of *game*))))
                              (incf (bladder/contents-of (player-of *game*)) (* bladder-time (bladder/fill-rate-of (player-of *game*))))))
                           (wet :clothes wear)
                           (mess :clothes wear))
                         (typecase result
                           (list (write-line "Ghost hands suddenly appear and grab you and carry you to another room against your will. The ghost hands then set you on a changing table while holding you down to prevent your escape. You can only lay there in embarrassment as They then remove your diaper, then raise your legs up and slide a new one under you. They then lay your legs down and fasten the sides of the diaper, they then lift you up and set you down on the floor and give your padded rump a firm pat.")
                            (setf (position-of (player-of *game*)) '(0 0 0 yadfa-zones:pyramid))
                            (change-class (first (wear-of (player-of *game*))) 'yadfa-items:temple-diaper)
                            (apply 'reinitialize-instance (first (wear-of (player-of *game*)))
                                   (iter (for slot in (c2mop:compute-slots (find-class 'yadfa-items:temple-diaper)))
                                     (collect (car (c2mop:slot-definition-initargs slot)))
                                     (collect (funcall (c2mop:slot-definition-initfunction slot))))))
                           (t (format t "Your pullup glows and transforms into a thick diaper with a Ankh on the front. According to the hieroglyphics, this is the infinity diaper, famous for never leaking at all.")
                            (change-class (first (wear-of (player-of *game*))) 'yadfa-items:infinity-diaper)
                            (apply 'reinitialize-instance (first (wear-of (player-of *game*)))
                                   (iter (for slot in (c2mop:compute-slots (find-class 'yadfa-items:infinity-diaper)))
                                     (collect (car (c2mop:slot-definition-initargs slot)))
                                     (collect (funcall (c2mop:slot-definition-initfunction slot)))))
                            (trigger-event 'infinity-diaper-obtained-1))))))))
  :repeatable t)
