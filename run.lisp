;; -*- mode: common-lisp; -*-
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

#+ecl (declaim (optimize (debug 2) safety))
#+ccl (ccl:set-current-compiler-policy (ccl:new-compiler-policy :trust-declarations (lambda (env)
                                                                                      (declare (ignore env)) nil)))
#+(and sbcl (not sb-gmp))
(macrolet ((a ()
             `(progn
                ,(when (some #'(lambda (pathname)
                                 (handler-case
                                     (sb-alien:load-shared-object pathname :dont-save t)
                                   (error (e) (declare (ignore e)) nil)))
                             #-(or os-windows os-macosx) '("libgmp.so" "libgmp.so.10" "libgmp.so.3")
                             #+os-macosx '("libgmp.dylib" "libgmp.10.dylib" "libgmp.3.dylib")
                             #+os-windows '("libgmp.dll" "libgmp-10.dll" "libgmp-3.dll"))
                   '(asdf:load-system :sb-gmp)))))
  (a))
#+sb-gmp (sb-gmp:install-gmp-funs)
(when (find "slynk" (uiop:command-line-arguments) :test #'string=)
  (ql:quickload "slynk")
  (uiop:symbol-call '#:slynk '#:create-server :dont-close t))
(when (find "swank" (uiop:command-line-arguments) :test #'string=)
  (ql:quickload "swank")
  (uiop:symbol-call '#:swank '#:create-server :dont-close t))
(when (find "ft" (uiop:command-line-arguments) :test #'string=)
  (pushnew :mcclim-ffi-freetype *features*))
(when (find "wait" (uiop:command-line-arguments) :test #'string=)
  (sleep 2))
(ql:quickload (loop for i in (asdf:system-depends-on (asdf:find-system :yadfa))
                    when (stringp i) collect i
                    when (and (listp i) (eq (first i) :feature) (uiop:featurep (second i))) collect (third i)))
(declaim (optimize (debug 2)))
(setf *read-default-float-format* 'long-float)
(ql:quickload :yadfa)
(in-package :yadfa)
(yadfa::main)
