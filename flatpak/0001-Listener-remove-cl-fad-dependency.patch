From 90d6e08131bb75dbee0c7918cb54cc70c0aea55f Mon Sep 17 00:00:00 2001
From: admich <andrea.demichele@gmail.com>
Date: Sun, 22 Dec 2019 14:43:00 +0100
Subject: [PATCH] Listener: remove cl-fad dependency

---
 Apps/Listener/asdf.lisp         |  3 ++-
 Apps/Listener/clim-listener.asd |  2 +-
 Apps/Listener/dev-commands.lisp | 21 +++++++++++----------
 Apps/Listener/file-types.lisp   |  2 +-
 Apps/Listener/icons.lisp        |  5 ++---
 5 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/Apps/Listener/asdf.lisp b/Apps/Listener/asdf.lisp
index eb9843e1..a944af15 100644
--- a/Apps/Listener/asdf.lisp
+++ b/Apps/Listener/asdf.lisp
@@ -50,7 +50,8 @@
       (mapc (lambda (path)
 	      (when (string-equal (pathname-type path) "asd")
 		(systems (truename path))))
-	    (cl-fad:list-directory (eval reg))))))
+            (uiop:directory-files
+             (uiop:ensure-directory-pathname (eval reg)))))))
 
 (defun asdf-operation-pretty-name (op)
   (case op
diff --git a/Apps/Listener/clim-listener.asd b/Apps/Listener/clim-listener.asd
index dfc8b495..2376a46e 100644
--- a/Apps/Listener/clim-listener.asd
+++ b/Apps/Listener/clim-listener.asd
@@ -15,7 +15,7 @@ experimentation. Present features include:
 - Navigation of the filesystem, including a directory stack
 - Launching of external programs sensitive to file type (determined by mailcap
   and mime.types files)"
-  :depends-on (#:mcclim #:clim-debugger #:uiop #:cl-fad #+sbcl #:sb-posix)
+  :depends-on (#:mcclim #:clim-debugger #:uiop #+sbcl #:sb-posix)
   :serial t
   :build-operation asdf:program-op
   :build-pathname "clim-listener"
diff --git a/Apps/Listener/dev-commands.lisp b/Apps/Listener/dev-commands.lisp
index 63d96ded..6dd21399 100644
--- a/Apps/Listener/dev-commands.lisp
+++ b/Apps/Listener/dev-commands.lisp
@@ -1047,7 +1047,7 @@ if you are interested in fixing this."))
   (terpri stream))
 
 (defun actual-name (pathname)
-  (if (cl-fad:directory-pathname-p pathname)
+  (if (uiop:directory-pathname-p pathname)
       (if (stringp (car (last (pathname-directory pathname))))
           (car (last (pathname-directory pathname)))
           (directory-namestring pathname))
@@ -1062,8 +1062,8 @@ if you are interested in fixing this."))
   (mapcar (lambda (x) (sort-pathnames x sort-by))
           (multiple-value-list
            (if (not group-dirs) (values list)
-             (values (remove-if-not #'cl-fad:directory-pathname-p list)
-                     (remove-if #'cl-fad:directory-pathname-p list))))))
+             (values (remove-if-not #'uiop:directory-pathname-p list)
+                     (remove-if #'uiop:directory-pathname-p list))))))
 
 (defun garbage-name-p (name)
   (when (> (length name) 2)
@@ -1099,7 +1099,7 @@ if you are interested in fixing this."))
      (list-all-direct-subdirectories 'boolean :default nil :prompt "list all direct subdirectories?"))
 
   (let* ((pathname (probe-file pathname))
-         (base-pathname (cl-fad:pathname-directory-pathname pathname))
+         (base-pathname (uiop:pathname-directory-pathname pathname))
          (query-pathname (make-pathname :name (or (pathname-name pathname) :wild)
                                         :type (or (pathname-type pathname) :wild)
                                         :directory :wild
@@ -1108,10 +1108,11 @@ if you are interested in fixing this."))
 		(mapc (lambda (path)
 			(when (or (pathname-match-p path query-pathname)
 				  (and list-all-direct-subdirectories
-				       (cl-fad:directory-pathname-p path)))
+				       (uiop:directory-pathname-p path)))
 			  ;; files is a collector defined above
 			  (files (truename path))))
-		      (cl-fad:list-directory base-pathname)))))
+              (append (uiop:subdirectories base-pathname)
+                      (uiop:directory-files base-pathname))))))
     (with-text-family (t :sans-serif)
       (invoke-as-heading
        (lambda ()
@@ -1163,7 +1164,7 @@ if you are interested in fixing this."))
   ((pathname 'pathname :prompt "pathname"))
   (let ((pathname (merge-pathnames
                    ;; helpfully fix things if trailing slash wasn't entered
-                   (cl-fad:pathname-as-directory pathname))))
+                   (uiop:ensure-directory-pathname pathname))))
     (if (not (probe-file pathname))
         (note "~A does not exist.~%" pathname)
         (progn
@@ -1194,7 +1195,7 @@ if you are interested in fixing this."))
                                  (format stream "Change to this directory"))
 
 		 :tester ((object)
-			  (cl-fad:directory-pathname-p object)))
+			  (uiop:directory-pathname-p object)))
   (object)
   (list object))
 
@@ -1246,7 +1247,7 @@ if you are interested in fixing this."))
                  (format nil "Show Files Matching ~A" pathname)))
         ((not (probe-file pathname))
          (values nil nil nil))
-        ((cl-fad:directory-pathname-p pathname)
+        ((uiop:directory-pathname-p pathname)
          (values `(com-show-directory ,pathname)
                  "Show Directory"
                  (format nil "Show Directory ~A" pathname)))
@@ -1297,7 +1298,7 @@ if you are interested in fixing this."))
                                     :menu t
                                     :command-table directory-stack-commands)
   ((pathname 'pathname :prompt "directory"))
-  (let ((pathname (merge-pathnames (cl-fad:pathname-as-directory pathname))))
+  (let ((pathname (merge-pathnames (uiop:ensure-directory-pathname pathname))))
     (if (not (probe-file pathname))
         (note "~A does not exist.~%" pathname)
         (progn (push *default-pathname-defaults* *directory-stack*)
diff --git a/Apps/Listener/file-types.lisp b/Apps/Listener/file-types.lisp
index 857df81e..4cdaa45a 100644
--- a/Apps/Listener/file-types.lisp
+++ b/Apps/Listener/file-types.lisp
@@ -135,7 +135,7 @@
   (cond ((wild-pathname-p pathname) (standard-icon "wild.xpm"))
         ((not (probe-file pathname)) (standard-icon "invalid.xpm"))
         ;; FIXME: use inode mime types
-        ((cl-fad:directory-pathname-p pathname) *folder-icon*)
+        ((uiop:directory-pathname-p pathname) *folder-icon*)
         (t (let ((mime-class (find-class (pathname-mime-type pathname) nil)))
              (if mime-class
                  (or (gethash (class-name mime-class) *icon-mapping*)
diff --git a/Apps/Listener/icons.lisp b/Apps/Listener/icons.lisp
index 684b4f68..632409a0 100644
--- a/Apps/Listener/icons.lisp
+++ b/Apps/Listener/icons.lisp
@@ -66,9 +66,8 @@
       (stream-increment-cursor-position stream (+ (pattern-width pattern) extra-spacing) 0))))
 
 (defun precache-icons ()
-  (let ((pathnames (remove-if #'cl-fad:directory-pathname-p
-                              (cl-fad:list-directory
-                               (cl-fad:pathname-directory-pathname *icon-path*)))))
+  (let ((pathnames (uiop:directory-files
+                    (uiop:pathname-directory-pathname *icon-path*))))
     (dolist (pn pathnames)
       (standard-icon (namestring (make-pathname :name (pathname-name pn)
                                                 :type (pathname-type pn)))))))
-- 
2.25.1

