;; -*- mode: common-lisp; -*-
#+sbcl (sb-ext:restrict-compiler-policy 'debug 2)
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                          (user-homedir-pathname))))
    (when (probe-file quicklisp-init)
        (load quicklisp-init)))
(macrolet ((a ()
               `(progn
                    ,(when (position "debug" (uiop:command-line-arguments) :test #'string=)
                         '(declaim (optimize (debug 3))))
                    #+sbcl
                    ,(when (some #'(lambda (pathname)
                                 (handler-case
                                     (sb-alien:load-shared-object pathname :dont-save t)
                                     (error (e) (declare (ignore e)) nil)))
                         #-(or win32 darwin) '("libgmp.so" "libgmp.so.10" "libgmp.so.3")
                         #+darwin '("libgmp.dylib" "libgmp.10.dylib" "libgmp.3.dylib")
                         #+win32 '("libgmp.dll" "libgmp-10.dll" "libgmp-3.dll"))
                   '(asdf:load-system :sb-gmp)))))
    (a))
#+sb-gmp (sb-gmp:install-gmp-funs)
(when (position "ironclad" (uiop:command-line-arguments) :test #'string=)
    (pushnew :ironclad *features*))
(when (position "slynk" (uiop:command-line-arguments) :test #'string=)
    (pushnew :slynk *features*))
(when (position "swank" (uiop:command-line-arguments) :test #'string=)
    (pushnew :swank *features*))
(when (position "ft" (uiop:command-line-arguments) :test #'string=)
    (pushnew :mcclim-ffi-freetype *features*))
(when (position "texi" (uiop:command-line-arguments) :test #'string=)
    (pushnew :yadfa/docs *features*))
(when (position "mods" (uiop:command-line-arguments) :test #'string=)
    (pushnew :yadfa/mods *features*))
(ql:quickload :yadfa)
(asdf:make :yadfa :force (when (position "force" (uiop:command-line-arguments) :test #'string=) t))
